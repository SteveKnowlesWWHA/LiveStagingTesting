<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/10/2019 10:57:27 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PC2RN3MJ2"
  DTS:CreatorName="WWHA\Hal.Jordan"
  DTS:DTSID="{00F4425A-B56D-4EB5-87EA-9D2B6AFF3EA2}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3026.27"
  DTS:LocaleID="2057"
  DTS:ObjectName="Live_CRM_TenancyAndNotes"
  DTS:PackageType="5"
  DTS:VersionBuild="3"
  DTS:VersionGUID="{3421022F-592D-4638-BEDD-60AF4BFCE4A4}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 0"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="if keep table exists, drops table and then renames current table to add KEEP, runs query against OH db and inserts "
      DTS:DTSID="{5DC4A61C-EB50-4EF4-A7B0-7212E45DF018}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 0"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="/*** New crm_Tenancy using SQL ***/&#xA;use livedynamics;&#xA;&#xA;--1)clear the table out&#xA;IF OBJECT_ID('crm_TenancyKeep', 'U') IS NOT NULL&#xA;  DROP TABLE  crm_TenancyKeep;&#xA;&#xA;IF OBJECT_ID('crm_Tenancy') IS NOT NULL EXEC sp_rename 'dbo.crm_Tenancy', 'crm_TenancyKEEP';&#xA;&#xA;IF OBJECT_ID('dbo.crm_Tenancy', 'U') IS NOT NULL &#xA;  DROP TABLE dbo.crm_Tenancy; &#xA;&#xA;&#xA;CREATE TABLE [dbo].[crm_Tenancy] (&#xA;[TenantName] varchar(60),&#xA;[TenancyRef] varchar(50),&#xA;[TncyStart] datetime,&#xA;[TncyEnd] datetime,&#xA;[PlaceRef] varchar(50),&#xA;[PersonRef] varchar(50),&#xA;[TncyType] varchar(50),&#xA;[Arrears] money,&#xA;[NetRent] money,&#xA;[GrossRent] money,&#xA;[CurrBalance] money,&#xA;[TncyStatus] varchar(50),&#xA;[TncyCat] varchar(50),&#xA;[StageCode] varchar(50),&#xA;[PaymentMethod] varchar(50),&#xA;[TermReason] varchar(50)&#xA;)&#xA;GO&#xA;&#xA;insert into crm_Tenancy (&#xA;[TenantName],&#xA;[TenancyRef],&#xA;[TncyStart],&#xA;[TncyEnd],&#xA;[PlaceRef],&#xA;[PersonRef],&#xA;[TncyType],&#xA;[Arrears],&#xA;[NetRent],&#xA;[GrossRent],&#xA;[CurrBalance],&#xA;[TncyStatus],&#xA;[TncyCat],&#xA;[StageCode],&#xA;[PaymentMethod],&#xA;[TermReason]&#xA;)&#xA;&#xA;&#xA;&#xA;&#xA;select &#xA;&#x9;RTRIM(isnull(substring([CORR-NAME],1,CHARINDEX(';',[CORR-NAME],1) - 1),'')) as TenantName,&#xA;&#x9;RTRIM(isnull([TENANCY-REF],'')) AS TenancyRef,&#xA;&#x9;([TNCY-START]) AS TncyStart, &#xA;&#x9;[TNCY-END] AS TncyEnd,&#xA;&#x9;RTRIM(isnull([PLACE-REF],'')) AS PlaceRef,&#xA;&#x9;RTRIM(isnull([PERSON-REF],'')) AS PersonRef,&#xA;&#x9;RTRIM(isnull([TNCY-TYPE],'')) AS TncyType, &#xA;&#x9;isnull(convert(money,ARREARS),'') AS Arrears,&#xA;&#x9;isnull(convert(money,[NET-RENT]),'') AS NetRent,&#xA;&#x9;isnull(convert(money,&quot;GROSS-RENT&quot;),'') AS GrossRent,&#xA;&#x9;isnull(CONVERT(money,&quot;CURR-BALANCE&quot;),'') AS CurrBalance,&#xA;&#x9;isnull([TNCY-STATUS],'') AS TncyStatus,&#xA;&#x9;isnull([TNCY-CAT],'') AS TncyCat,&#xA;&#x9;isnull([ARREARS-STAGE],'') AS StageCode,&#xA;&#x9;isnull([DESCRIPTION],'') AS PaymentMethod,&#xA;&#x9;isnull([TERM-REASON],'') AS TermReason&#xA;&#xA;&#x9;&#xA;from Openquery(LIVE_OH, &#xA;  'select &#xA;    TENANCY.&quot;ARREARS&quot;,&#xA; &#x9;TENANCY.&quot;TENANCY-REF&quot;,&#xA;&#x9;TENANCY.&quot;CORR-NAME&quot;,&#xA;&#x9;TENANCY.&quot;TNCY-START&quot;, &#xA;&#x9;TENANCY.&quot;TNCY-END&quot;,&#xA;&#x9;TENANCY.&quot;TNCY-SYS-REF&quot;,&#xA;&#x9;TNCYPLACE.&quot;PLACE-REF&quot;,&#xA;&#x9;TNCYPERSON.&quot;MAIN-CONTACT&quot;, &#xA;&#x9;TNCYPERSON.&quot;ON-TNCY&quot;,&#xA;&#x9;TNCYPERSON.&quot;PERSON-REF&quot;,&#xA;&#x9;TENANCY.&quot;TNCY-TYPE&quot;, &#xA;&#x9;TENANCY.&quot;TNCY-CAT&quot;, &#xA;&#x9;TENANCY.&quot;NET-RENT&quot;, &#xA;&#x9;TENANCY.&quot;GROSS-RENT&quot;, &#xA;&#x9;TENANCY.&quot;CURR-BALANCE&quot;, &#xA;&#x9;TENANCY.&quot;TNCY-STATUS&quot;,&#xA;&#x9;TENANCY.&quot;ARREARS-STAGE&quot;,&#xA;&#x9;LOCATION.&quot;LOCATION-STS&quot;, &#xA;&#x9;LOCATION.&quot;LOCATION-TYPE&quot;, &#xA;&#x9;LOCATION.&quot;MGT-AREA&quot;,&#xA;&#x9;TENANCY.&quot;PMT-METHOD&quot;,&#xA;  &#x9;PAYMTMETHODS.&quot;DESCRIPTION&quot;,&#xA;&#x9;TENANCY.&quot;TERM-REASON&quot;&#xA;&#xA;&#x9;  &#xA;from &#xA;&#x9;PUB.&quot;IH-LOCATION&quot; LOCATION,&#xA;&#x9;PUB.&quot;RE-TNCY-PERSON&quot; TNCYPERSON,&#xA;    PUB.&quot;RE-TNCY-PLACE&quot; TNCYPLACE,&#xA;&#x9;PUB.&quot;RE-TENANCY&quot; TENANCY,&#xA;&#x9;PUB.&quot;RE_PAYMT-METHODS&quot; PAYMTMETHODS&#xA;&#xA;where&#xA;&#xA;    TNCYPERSON.&quot;MAIN-CONTACT&quot; = 1&#xA;&#x9;AND  TNCYPERSON.&quot;ON-TNCY&quot; = 1 &#xA;&#x9;AND TENANCY.&quot;TNCY-STATUS&quot; = ''CUR''&#xA;&#x9;AND LOCATION.&quot;MGT-AREA&quot; IN (''1'',''2'',''3'',''4'',''5'',''6'',''7'',''8'',''9'',''10'',''CARE'')&#xA;&#x9;AND LOCATION.&quot;LOCATION-STS&quot; IN  (''O'',''V'')&#xA;&#x9;AND LOCATION.&quot;LOCATION-TYPE&quot; IN (''BUNGALOW'',''FLAT'',''HOUSE'',''MAISONET'',''ROOM'',''STUDIO'')&#xA;&#x9;&#xA;&#x9;AND TNCYPLACE.&quot;ORG-CODE&quot; = TENANCY.&quot;ORG-CODE&quot;&#xA;&#x9;&#xA;&#x9;and TNCYPLACE.&quot;TNCY-SYS-REF&quot; = TENANCY.&quot;TNCY-SYS-REF&quot;&#xA;&#x9;&#xA;&#x9;and TNCYPLACE.&quot;ORG-CODE&quot; = LOCATION.&quot;ORG-CODE&quot;&#xA;&#x9; &#xA;&#x9;and TNCYPLACE.&quot;PLACE-REF&quot; = LOCATION.&quot;PLACE-REF&quot; &#xA;&#x9;&#xA;&#x9;and TENANCY.&quot;ORG-CODE&quot; = TNCYPERSON.&quot;ORG-CODE&quot; &#xA;&#x9;and TENANCY.&quot;TNCY-SYS-REF&quot; = TNCYPERSON.&quot;TNCY-SYS-REF&quot;&#xA;&#x9;AND TENANCY.&quot;PMT-METHOD&quot; = PAYMTMETHODS.&quot;PMT-METHOD&quot; &#xA;&#x9;and TENANCY.&quot;ORG-CODE&quot; = PAYMTMETHODS.&quot;ORG-CODE&quot; &#xA;&#xA;    ')&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 1"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Deletes rows based on certain values, then where date is 1899 will set the dates to NULL, adds columns "
      DTS:DTSID="{14EC3D9B-54D2-4B4C-AF64-9F01AAF4F09A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 1"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="/*** Delete blank lines from livedynamics ***/&#xA;USE livedynamics;&#xA;&#xA;Delete from crm_tenancy where TenancyRef is null OR TenancyRef=''; &#xA;&#xA;/****** Script for sdetting dates to NULL  ******/&#xA;Use livedynamics;&#xA;&#xA;Update [crm_tenancy] set [TncyStart]= NULL where [TncyStart]='1899-12-30 00:00:00.000';&#xA;Update [crm_tenancy] set [TncyEnd]= NULL where [TncyEnd]='1899-12-30 00:00:00.000';&#xA;&#xA;&#xA;/** crm_tenancy ***/&#xA;Use livedynamics;&#xA;ALTER TABLE crm_Tenancy&#xA;&#x9;ADD ImportTransactionId int,&#xA;&#x9;&#x9;ImportType [char] (1),&#xA;&#x9;&#x9;SubmittedOn datetime,&#xA;&#x9;&#x9;ImportStatus nvarchar (20),&#xA;&#x9;&#x9;LastImportedAttempt datetime,&#xA;&#x9;&#x9;ImportedOn datetime&#xA;GO&#xA;;&#xA;Use livedynamics;&#xA;&#xA;DECLARE @id INT&#xA;SET @id=0&#xA;update crm_Tenancy set @id=ImportTransactionId=@id+1&#xA;GO&#xA;;&#xA;update crm_Tenancy set ImportType='C';&#xA;update crm_Tenancy set SubmittedOn= GetDate();&#xA;update crm_Tenancy set Importstatus='Pending';&#xA;&#xA;/** End crm_Tenancy **/&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 2"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="if keep table exists, drops table and then renames current table to add KEEP, runs query against OH db and inserts "
      DTS:DTSID="{986D1796-B002-421D-93D3-75F4CE53375A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 2"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="/*** Diary notes for entry type NOT TEXT LETTER ARREARS   ***/&#xA;Use livedynamics;&#xA;--IF OBJECT_ID('crm_NotesKEEP') IS NOT NULL DROP TABLE crm_NotesKEEP;&#xA;--IF OBJECT_ID('crm_Notes') IS NOT NULL EXEC sp_rename 'dbo.crm_Notes', 'crm_NotesKEEP';&#xA;&#xA;--1)clear the table out&#xA;IF OBJECT_ID('crm_NotesKeep', 'U') IS NOT NULL&#xA;  DROP TABLE  crm_NotesKeep;&#xA;&#xA;IF OBJECT_ID('crm_Notes') IS NOT NULL EXEC sp_rename 'dbo.crm_Notes', 'crm_NotesKEEP';&#xA;&#xA;IF OBJECT_ID('dbo.crm_Notes', 'U') IS NOT NULL &#xA;  DROP TABLE dbo.crm_Notes; &#xA;&#xA;&#xA;&#xA;&#xA;SELECT t.TenancyRef,  &#xA;&#x9;notes.[CRT-USER] as [AddBy], &#xA;&#x9;CONVERT(datetime, Concat(notes.[ENTRY-DATE], ' ', notes.[ENTRY-TIME]), 120) as AddDate, &#xA;&#x9;notes.[ENTRY-TEXT] as EntryText, &#xA;&#x9;notes.[ENTRY-TYPE] as EntryType,&#xA;&#x9;notes.[REF-TYPE] as RefType,&#xA;&#x9;ISNULL(notes.TextExt, '') as EntryTextExt,&#xA;&#x9;notes.[ORG-CODE] as OrgCode,&#xA;&#x9;notes.[ENTRY-TIME] as AddTime, &#xA;&#x9;t.TncyEnd,&#xA;&#x9;t.PlaceRef,&#xA;&#x9;t.PersonRef,&#xA;&#x9;t.TncyStart,&#xA;&#x9;t.TncyType,&#xA;&#x9;TncyStatus&#xA;&#x9;&#xA;INTO crm_Notes&#xA;FROM crm_Tenancy t&#xA;INNER JOIN (&#xA;&#x9;select * from Openquery(LIVE_OH, &#xA;&#x9;&#x9;'select &#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;CRT-USER&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TEXT&quot;,&#xA;&#x9;&#x9;&#x9;LEFT(e.&quot;ENTRY-TEXT&quot;, 8000) &quot;TextExt&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TIME&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TYPE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ORG-CODE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot;,&#xA;&#x9;&#x9;&#x9;d.REFERENCE as TenancyRef&#xA;&#x9;&#x9; from pub.&quot;co-diary&quot; d&#xA;&#x9;&#x9;&#x9;LEFT JOIN pub.&quot;co-diary-ext&quot; e ON&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot; = e.&quot;REF-TYPE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ORG-CODE&quot; = e.&quot;ORG-CODE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.REFERENCE = e.REFERENCE AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot; = e.&quot;ENTRY-DATE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-TIME&quot; = e.&quot;ENTRY-TIME&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-TYPE&quot; = e.&quot;ENTRY-TYPE&quot;&#xA;&#x9;&#x9;where &#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot; &gt;= curdate()-30&#xA;&#x9;&#x9;&#x9;AND d.&quot;REF-TYPE&quot; = ''TN'' AND &#xA;&#x9;&#x9;                d.&quot;ENTRY-TYPE&quot; NOT IN (''TEXT'',''CRTORD'',''LETTER'',''ARREARS'')&#xA;&#x9;&#x9;&#x9;&#x9;')&#xA;&#x9;) notes&#xA;&#x9;ON notes.TenancyRef = t.TenancyRef&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 3"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{821EA815-086A-48F8-9CFF-77482857B57D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 3"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="/*** Diary notes for entry type TEXT and CRTORD  ***/&#xA;Use livedynamics;&#xA;IF OBJECT_ID('crm_NotesTextKEEP') IS NOT NULL DROP TABLE crm_NotesTextKEEP;&#xA;IF OBJECT_ID('crm_NotesText') IS NOT NULL EXEC sp_rename 'dbo.crm_NotesText', 'crm_NotesTextKEEP';&#xA;&#xA;SELECT t.TenancyRef, t.PlaceRef, t.PersonRef,&#xA;&#x9;notes.[CRT-USER] as [AddBy], &#xA;&#x9;CONVERT(datetime, Concat(notes.[ENTRY-DATE], ' ', notes.[ENTRY-TIME]), 120) as AddDate, &#xA;&#x9;notes.[ENTRY-TEXT] as EntryText, &#xA;&#x9;ISNULL(notes.TextExt, '') as EntryTextExt,&#xA;&#x9;notes.[REF-TYPE] as RefType,&#xA;&#x9;notes.[ORG-CODE] as OrgCode,&#xA;&#x9;notes.[ENTRY-TIME] as AddTime, &#xA;&#x9;notes.[ENTRY-TYPE] as EntryType&#xA;INTO crm_NotesText&#xA;FROM crm_Tenancy t&#xA;INNER JOIN (&#xA;&#x9;select * from Openquery(LIVE_OH, &#xA;&#x9;&#x9;'select &#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;CRT-USER&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TEXT&quot;,&#xA;&#x9;&#x9;&#x9;LEFT(e.&quot;ENTRY-TEXT&quot;, 8000) &quot;TextExt&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TIME&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TYPE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ORG-CODE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot;,&#xA;&#x9;&#x9;&#x9;d.REFERENCE as TenancyRef&#xA;&#x9;&#x9; from pub.&quot;co-diary&quot; d&#xA;&#x9;&#x9;&#x9;LEFT JOIN pub.&quot;co-diary-ext&quot; e ON&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot; = e.&quot;REF-TYPE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ORG-CODE&quot; = e.&quot;ORG-CODE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.REFERENCE = e.REFERENCE AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot; = e.&quot;ENTRY-DATE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-TIME&quot; = e.&quot;ENTRY-TIME&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-TYPE&quot; = e.&quot;ENTRY-TYPE&quot;&#xA;&#x9;&#x9;where &#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot; &gt;= curdate()-30 AND&#xA;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot; = ''TN'' AND &#xA;&#x9;&#x9;                d.&quot;ENTRY-TYPE&quot; IN (''TEXT'',''CRTORD'')&#xA;&#x9;&#x9;&#x9;&#x9;')&#xA;&#x9;) notes&#xA;&#x9;ON notes.TenancyRef = t.TenancyRef&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 4"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="if keep table exists, drops table and then renames current table to add KEEP, runs query against OH db and inserts "
      DTS:DTSID="{FC2C585C-00B9-406F-AC19-75277D9DAA30}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 4"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="/*** Diary enty type Letter Only ***/&#xA;Use livedynamics;&#xA;IF OBJECT_ID('crm_NotesLetterKEEP') IS NOT NULL DROP TABLE crm_NotesLetterKEEP;&#xA;IF OBJECT_ID('crm_NotesLetter') IS NOT NULL EXEC sp_rename 'dbo.crm_NotesLetter', 'crm_NotesLetterKEEP';&#xA;&#xA;SELECT t.TenancyRef, t.PlaceRef, t.PersonRef,&#xA;&#x9;notes.[CRT-USER] as [AddBy], &#xA;&#x9;CONVERT(datetime, Concat(notes.[ENTRY-DATE], ' ', notes.[ENTRY-TIME]), 120) as AddDate, &#xA;&#x9;notes.[ENTRY-TEXT] as EntryText, &#xA;&#x9;ISNULL(notes.TextExt, '') as EntryTextExt,&#xA;&#x9;notes.[REF-TYPE] as RefType,&#xA;&#x9;notes.[ORG-CODE] as OrgCode,&#xA;&#x9;notes.[ENTRY-TIME] as AddTime, &#xA;&#x9;notes.[ENTRY-TYPE] as EntryType&#xA;INTO crm_NotesLetter&#xA;FROM crm_Tenancy t&#xA;INNER JOIN (&#xA;&#x9;select * from Openquery(LIVE_OH, &#xA;&#x9;&#x9;'select &#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;CRT-USER&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TEXT&quot;,&#xA;&#x9;&#x9;&#x9;LEFT(e.&quot;ENTRY-TEXT&quot;, 8000) &quot;TextExt&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TIME&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TYPE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;ORG-CODE&quot;,&#xA;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot;,&#xA;&#x9;&#x9;&#x9;d.REFERENCE as TenancyRef&#xA;&#x9;&#x9; from pub.&quot;co-diary&quot; d&#xA;&#x9;&#x9;&#x9;LEFT JOIN pub.&quot;co-diary-ext&quot; e ON&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot; = e.&quot;REF-TYPE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ORG-CODE&quot; = e.&quot;ORG-CODE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.REFERENCE = e.REFERENCE AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot; = e.&quot;ENTRY-DATE&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-TIME&quot; = e.&quot;ENTRY-TIME&quot; AND&#xA;&#x9;&#x9;&#x9;&#x9;d.&quot;ENTRY-TYPE&quot; = e.&quot;ENTRY-TYPE&quot;&#xA;&#x9;&#x9;where &#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-DATE&quot; &gt;= curdate()-30 AND&#xA;&#x9;&#x9;&#x9;d.&quot;REF-TYPE&quot; = ''TN'' AND &#xA;&#x9;&#x9;&#x9;d.&quot;ENTRY-TYPE&quot; = ''LETTER''&#xA;&#x9;&#x9;&#x9;&#x9;')&#xA;&#x9;) notes&#xA;&#x9;ON notes.TenancyRef = t.TenancyRef&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 5"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Deletes rows based on certain values, then where date is 1899 will set the dates to NULL, adds columns "
      DTS:DTSID="{67EDD434-2570-4AB6-8890-42E56328645E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 5"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="use livedynamics;&#xA;&#xA;Delete from crm_Notes where TenancyRef is null OR TenancyRef=''; &#xA;&#xA;Delete from crm_NotesText where TenancyRef is null OR TenancyRef=''; &#xA;Delete from crm_NotesLetter where TenancyRef is null OR TenancyRef=''; &#xA;&#xA;Update [crm_Notes] set [TncyStart]= NULL where [TncyStart]='1899-12-30 00:00:00.000'; &#xA;Update [crm_Notes] set [TncyEnd]= NULL where [TncyEnd]='1899-12-30 00:00:00.000'; &#xA;Update [crm_Notes] set [AddDate]= NULL where [AddDate]='1899-12-30 00:00:00.000'; &#xA;&#xA;Update [crm_NotesText] set [AddDate]= NULL where [AddDate]='1899-12-30 00:00:00.000';&#xA;Update [crm_NotesLetter] set [AddDate]= NULL where [AddDate]='1899-12-30 00:00:00.000';&#xA;&#xA;DELETE from crm_NotesLetter where EntryText LIKE 'SBL%';&#xA;&#xA;/** Add Importer columns ***/&#xA;&#xA;/** crm_Notes ***/&#xA;Use livedynamics;&#xA;ALTER TABLE crm_Notes&#xA;&#x9;ADD ImportTransactionId int,&#xA;&#x9;&#x9;ImportType [char] (1),&#xA;&#x9;&#x9;SubmittedOn datetime,&#xA;&#x9;&#x9;ImportStatus nvarchar (20),&#xA;&#x9;&#x9;LastImportedAttempt datetime,&#xA;&#x9;&#x9;ImportedOn datetime&#xA;GO&#xA;;&#xA;Use livedynamics;&#xA;&#xA;DECLARE @id INT&#xA;SET @id=0&#xA;update crm_Notes set @id=ImportTransactionId=@id+1&#xA;GO&#xA;;&#xA;update crm_Notes set ImportType='C';&#xA;update crm_Notes set SubmittedOn= GetDate();&#xA;update crm_Notes set Importstatus='Pending';&#xA;&#xA;&#xA;/** End crm_Notes **/ &#xA;&#xA;&#xA;/** crm_NotesText ***/&#xA;Use livedynamics;&#xA;ALTER TABLE crm_NotesText&#xA;&#x9;ADD ImportTransactionId int,&#xA;&#x9;&#x9;ImportType [char] (1),&#xA;&#x9;&#x9;SubmittedOn datetime,&#xA;&#x9;&#x9;ImportStatus nvarchar (20),&#xA;&#x9;&#x9;LastImportedAttempt datetime,&#xA;&#x9;&#x9;ImportedOn datetime&#xA;GO&#xA;;&#xA;Use livedynamics;&#xA;&#xA;DECLARE @id INT&#xA;SET @id=0&#xA;update crm_NotesText set @id=ImportTransactionId=@id+1&#xA;GO&#xA;;&#xA;update crm_NotesText set ImportType='C';&#xA;update crm_NotesText set SubmittedOn= GetDate();&#xA;update crm_NotesText set Importstatus='Pending';&#xA;&#xA;/** End crm_NotesText **/&#xA;&#xA;/** crm_NotesLetter ***/&#xA;Use livedynamics;&#xA;ALTER TABLE crm_NotesLetter&#xA;&#x9;ADD ImportTransactionId int,&#xA;&#x9;&#x9;ImportType [char] (1),&#xA;&#x9;&#x9;SubmittedOn datetime,&#xA;&#x9;&#x9;ImportStatus nvarchar (20),&#xA;&#x9;&#x9;LastImportedAttempt datetime,&#xA;&#x9;&#x9;ImportedOn datetime&#xA;GO&#xA;;&#xA;Use livedynamics;&#xA;&#xA;DECLARE @id INT&#xA;SET @id=0&#xA;update crm_NotesLetter set @id=ImportTransactionId=@id+1&#xA;GO&#xA;;&#xA;update crm_NotesLetter set ImportType='C';&#xA;update crm_NotesLetter set SubmittedOn= GetDate();&#xA;update crm_NotesLetter set Importstatus='Pending';&#xA;&#xA;/** End crm_NotesLetter **/" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 6"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Creates temp table, inserts into it and then opens cursor to update"
      DTS:DTSID="{690CCCC6-2D9C-4AE2-A693-997611E491DD}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 6"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="/****** LIVE Script for SelectTopNRows command from SSMS and fix Notes ******/&#xA;use Livedynamics;&#xA;&#xA;alter table crm_notes&#xA;add thepk int identity&#xA;go&#xA; &#xA;&#xA;&#xA; &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  --****&#xA;declare @updatetbl  table&#xA;(&#xA;&#x9;newtime  varchar(8),&#xA;&#x9;thepk int,&#xA;&#x9;tenancyref varchar(50), [RefType] varchar(50),[EntryType] varchar(50),[AddBy] varchar(50),  [addTime] varchar(50),[addDate] datetime&#xA;)&#xA;&#xA;&#xA;insert into &#xA;@updatetbl&#xA;(newtime ,&#xA;&#x9;thepk,&#xA;&#x9;tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate]&#xA;)&#xA;select convert(varchar(8),dateadd(second,row_number,convert(time,addtime))) as nesuperwtime,&#xA;thepk,tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate]&#xA;&#xA;&#xA; from (&#xA;&#xA;SELECT &#xA;row_number() over (partition by tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate] order by tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate]) as row_number,&#xA;convert(time,addtime) as newtime,addtime,&#xA;thepk,tenancyref, [RefType],[EntryType],[AddBy],  [addDate]&#xA;  FROM [Livedynamics].[dbo].[crm_Notes]&#xA;  ) as o&#xA;&#xA;  where row_number &gt;1&#xA;&#xA;&#xA;&#xA;  select * from @updatetbl&#xA;&#xA;&#xA;&#xA;  &#x9;declare @newtime as varchar(8)&#xA;&#x9;declare @thepk int&#xA;&#xA;&#xA;&#xA;Declare @itemsCursor CURSOR &#xA;&#xA;set @itemsCursor = CURSOR FOR&#xA;Select newtime ,&#xA;&#x9;thepk from @updatetbl&#xA;&#xA;OPEN @itemsCursor&#xA;FETCH NEXT FROM @itemsCursor&#xA;INTO  @newtime ,&#xA;&#x9;@thepk&#xA;&#xA;WHILE @@FETCH_STATUS = 0&#xA;BEGIN&#xA;print convert(varchar(50), @thepk )&#xA;print @newtime&#xA;&#xA;     update crm_notes set addtime = @newtime where &#xA;&#x9; thepk=@thepk&#xA;     &#xA;&#xA;     FETCH NEXT FROM @itemsCursor&#xA;     INTO @newtime ,&#xA;&#x9;@thepk&#xA;END&#xA;&#xA;CLOSE @itemsCursor&#xA;DEALLOCATE @itemsCursor&#xA;&#xA;&#xA;alter table crm_notes&#xA;drop column thepk" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task - Step 7"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{6498B870-DBC2-46E7-88B8-D6EB17AB2EF0}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task - Step 7"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B98F0C27-9E59-411E-8D60-D3B41EEEBFDC}"
          SQLTask:SqlStatementSource="/****** Live Script for SelectTopNRows command from SSMS and fix NotesText ******/&#xA;use Livedynamics;&#xA;&#xA;alter table crm_notesText&#xA;add thepk int identity&#xA;go&#xA; &#xA;&#xA;&#xA; &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  --****&#xA;declare @updatetbl  table&#xA;(&#xA;&#x9;newtime  varchar(8),&#xA;&#x9;thepk int,&#xA;&#x9;tenancyref varchar(50), [RefType] varchar(50),[EntryType] varchar(50),[AddBy] varchar(50),  [addTime] varchar(50),[addDate] datetime&#xA;)&#xA;&#xA;&#xA;insert into &#xA;@updatetbl&#xA;(newtime ,&#xA;&#x9;thepk,&#xA;&#x9;tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate]&#xA;)&#xA;select convert(varchar(8),dateadd(second,row_number,convert(time,addtime))) as nesuperwtime,&#xA;thepk,tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate]&#xA;&#xA;&#xA; from (&#xA;&#xA;SELECT &#xA;row_number() over (partition by tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate] order by tenancyref, [RefType],[EntryType],[AddBy],  [addTime],[addDate]) as row_number,&#xA;convert(time,addtime) as newtime,addtime,&#xA;thepk,tenancyref, [RefType],[EntryType],[AddBy],  [addDate]&#xA;  FROM [Livedynamics].[dbo].[crm_notesText]&#xA;  ) as o&#xA;&#xA;  where row_number &gt;1&#xA;&#xA;&#xA;&#xA;  select * from @updatetbl&#xA;&#xA;&#xA;&#xA;  &#x9;declare @newtime as varchar(8)&#xA;&#x9;declare @thepk int&#xA;&#xA;&#xA;&#xA;Declare @itemsCursor CURSOR &#xA;&#xA;set @itemsCursor = CURSOR FOR&#xA;Select newtime ,&#xA;&#x9;thepk from @updatetbl&#xA;&#xA;OPEN @itemsCursor&#xA;FETCH NEXT FROM @itemsCursor&#xA;INTO  @newtime ,&#xA;&#x9;@thepk&#xA;&#xA;WHILE @@FETCH_STATUS = 0&#xA;BEGIN&#xA;print convert(varchar(50), @thepk )&#xA;print @newtime&#xA;&#xA;     update crm_notesText set addtime = @newtime where &#xA;&#x9; thepk=@thepk&#xA;     &#xA;&#xA;     FETCH NEXT FROM @itemsCursor&#xA;     INTO @newtime ,&#xA;&#x9;@thepk&#xA;END&#xA;&#xA;CLOSE @itemsCursor&#xA;DEALLOCATE @itemsCursor&#xA;&#xA;&#xA;alter table crm_notesText&#xA;drop column thepk" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{AFF94FB4-9557-4B2C-A9F1-733640703F09}"
      DTS:From="Package\Execute SQL Task - Step 0"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Execute SQL Task - Step 1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{E3766E7E-1A97-486B-BFF1-EC0CC687B984}"
      DTS:From="Package\Execute SQL Task - Step 1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Execute SQL Task - Step 2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{3BFD112E-558F-42CB-8EDB-36D572DBBA18}"
      DTS:From="Package\Execute SQL Task - Step 2"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Execute SQL Task - Step 3" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{28C00900-2550-4E6E-A29D-51CCCD87D071}"
      DTS:From="Package\Execute SQL Task - Step 3"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Execute SQL Task - Step 4" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{1B4056DA-B975-4E6A-9FA9-07FE91767D7A}"
      DTS:From="Package\Execute SQL Task - Step 4"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Execute SQL Task - Step 5" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{CA0510AF-F7CE-4249-84C9-2D37F11C9FFD}"
      DTS:From="Package\Execute SQL Task - Step 5"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\Execute SQL Task - Step 6" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{C92211F4-D158-4B2C-9B8A-D2DF163E16FF}"
      DTS:From="Package\Execute SQL Task - Step 6"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\Execute SQL Task - Step 7" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="217,42"
          Id="Package\Execute SQL Task - Step 0"
          TopLeft="32,19" />
        <NodeLayout
          Size="204,42"
          Id="Package\Execute SQL Task - Step 1"
          TopLeft="262,62" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="249,39.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="115,22.5"
              Start="0,0"
              End="115,15">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="111,0" />
                  <mssgle:CubicBezierSegment
                    Point1="111,0"
                    Point2="115,0"
                    Point3="115,4" />
                  <mssgle:LineSegment
                    End="115,15" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="204,42"
          Id="Package\Execute SQL Task - Step 2"
          TopLeft="511,114" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="466,83">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="45,52"
              Start="0,0"
              End="37.5,52">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="18.5,0"
                    Point2="22.5,0"
                    Point3="22.5,4" />
                  <mssgle:LineSegment
                    End="22.5,48" />
                  <mssgle:CubicBezierSegment
                    Point1="22.5,48"
                    Point2="22.5,52"
                    Point3="26.5,52" />
                  <mssgle:LineSegment
                    End="37.5,52" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="204,42"
          Id="Package\Execute SQL Task - Step 3"
          TopLeft="824,87" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="715,135">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="109,-27"
              Start="0,0"
              End="101.5,-27">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="50.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="50.5,0"
                    Point2="54.5,0"
                    Point3="54.5,-4" />
                  <mssgle:LineSegment
                    End="54.5,-23" />
                  <mssgle:CubicBezierSegment
                    Point1="54.5,-23"
                    Point2="54.5,-27"
                    Point3="58.5,-27" />
                  <mssgle:LineSegment
                    End="101.5,-27" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="204,42"
          Id="Package\Execute SQL Task - Step 4"
          TopLeft="1040,162" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="926,129">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="216,33"
              Start="0,0"
              End="216,25.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,12.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,12.5"
                    Point2="0,16.5"
                    Point3="4,16.5" />
                  <mssgle:LineSegment
                    End="212,16.5" />
                  <mssgle:CubicBezierSegment
                    Point1="212,16.5"
                    Point2="216,16.5"
                    Point3="216,20.5" />
                  <mssgle:LineSegment
                    End="216,25.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="204,42"
          Id="Package\Execute SQL Task - Step 5"
          TopLeft="1053,266" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="1142,204">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="13,62"
              Start="0,0"
              End="13,54.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27" />
                  <mssgle:CubicBezierSegment
                    Point1="0,27"
                    Point2="0,31"
                    Point3="4,31" />
                  <mssgle:LineSegment
                    End="9,31" />
                  <mssgle:CubicBezierSegment
                    Point1="9,31"
                    Point2="13,31"
                    Point3="13,35" />
                  <mssgle:LineSegment
                    End="13,54.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="207,42"
          Id="Package\Execute SQL Task - Step 6"
          TopLeft="726,322" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="1053,287">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-120,56"
              Start="0,0"
              End="-112.5,56">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-56,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-56,0"
                    Point2="-60,0"
                    Point3="-60,4" />
                  <mssgle:LineSegment
                    End="-60,52" />
                  <mssgle:CubicBezierSegment
                    Point1="-60,52"
                    Point2="-60,56"
                    Point3="-64,56" />
                  <mssgle:LineSegment
                    End="-112.5,56" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="163,42"
          Id="Package\Execute SQL Task - Step 7"
          TopLeft="441,347" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="726,343">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-122,25"
              Start="0,0"
              End="-114.5,25">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-57,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-57,0"
                    Point2="-61,0"
                    Point3="-61,4" />
                  <mssgle:LineSegment
                    End="-61,21" />
                  <mssgle:CubicBezierSegment
                    Point1="-61,21"
                    Point2="-61,25"
                    Point3="-65,25" />
                  <mssgle:LineSegment
                    End="-114.5,25" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>